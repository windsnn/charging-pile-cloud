<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.trick.marketing.mapper.UserCouponMapper">
    <insert id="addCouponToUser">
        insert into user_coupons(user_id, coupon_id, claimed_at, expire_at)
        values (#{userId}, #{couponId}, #{claimedAt}, #{expireAt})
    </insert>

    <update id="updateCouponInformationForUser">
        UPDATE user_coupons
        SET used_at        = #{dto.usedAt},
            transaction_id = #{dto.transactionId}
        WHERE user_id = #{userId}
          AND coupon_id = #{couponId}
    </update>

    <select id="hasUserClaimedCoupon" resultType="java.lang.Boolean">
        select exists(select 1
                      from user_coupons
                      where user_id = #{userId}
                        and coupon_id = #{couponId}) as has_claimed
    </select>

    <select id="getCouponById" resultType="com.trick.marketing.model.dto.CouponsDTO">
        SELECT uc.claimed_at,
               uc.expire_at,
               uc.used_at,
               uc.transaction_id,
               c.name,
               c.type,
               c.description,
               c.discount_percent,
               c.min_spend,
               c.max_discount_amount,
               c.discount_amount,
               CASE
                   WHEN used_at IS NOT NULL THEN 1
                   WHEN used_at IS NULL AND NOW() > expire_at THEN 2
                   ELSE 0 END AS status
        FROM user_coupons uc
                 LEFT JOIN coupons c ON uc.coupon_id = c.id
        WHERE user_id = #{userId}
          AND coupon_id = #{couponId}
    </select>

    <select id="getCoupons" resultType="com.trick.marketing.model.dto.CouponsDTO">
        select uc.claimed_at,
               uc.expire_at,
               uc.used_at,
               uc.transaction_id,
               c.name,
               c.type,
               c.description,
               c.discount_percent,
               c.min_spend,
               c.max_discount_amount,
               c.discount_amount,
               CASE
                   WHEN used_at IS NOT NULL THEN 1
                   WHEN used_at IS NULL AND NOW() > expire_at THEN 2
                   ELSE 0 END AS status
        from user_coupons uc
                 left join coupons c on uc.coupon_id = c.id
        where uc.user_id = #{userId}
          and c.type = #{type}
    </select>


</mapper>